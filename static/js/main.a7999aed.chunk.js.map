{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Board","currentBoard","useState","board","setBoard","indexOf","emptyTile","setEmpty","handleClick","e","idx","Number","target","id","Math","abs","inCol","floor","inRow","newBoard","emptyIdx","slice","min","max","moveTiles","useEffect","victoryBoard","i","length","checkTiles","console","log","alert","className","map","tile","key","onClick","bind","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","initialConfiguration","document","getElementById"],"mappings":"mLAKe,SAASA,IAAU,IA+CTC,EA/CQ,SAEHC,mBAAS,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,KAF1C,mBAEtBC,EAFsB,KAEfC,EAFe,OAGEF,mBAASC,EAAME,QAAQ,IAHzB,mBAGtBC,EAHsB,KAGXC,EAHW,KAoCvBC,EAAc,SAACC,GACjB,IAAIC,EAAMC,OAAOF,EAAEG,OAAOC,IAE1B,IAlCU,SAACH,GACX,OAAOI,KAAKC,IAAIL,EAAMJ,IAAc,GAAKA,EAAY,IAAMI,EAAM,EAiC5DM,CAAMN,KA9BD,SAACA,GACX,OAAOI,KAAKC,IAAIL,EAAMJ,GAAa,GAAKQ,KAAKG,MAAMP,EAAM,KAAOI,KAAKG,MAAMX,EAAY,GA6BpEY,CAAMR,GACrB,OAAO,EAEX,IAAMS,EA7BQ,SAACT,GACf,IAAMU,EAAWd,EACXa,EAAWhB,EAAMkB,QACjBC,EAAMR,KAAKQ,IAAIZ,EAAKU,GACpBG,EAAMT,KAAKS,IAAIb,EAAKU,GAGxB,OAF6C,IAA9BN,KAAKC,IAAIL,EAAMJ,IAAkD,IAA9BQ,KAAKC,IAAIL,EAAMJ,GAG3Da,EAASI,IAMTJ,EAASG,GAAOH,EAASI,GACzBJ,EAASI,GAAO,EAChBhB,EAASG,GACFS,IARPA,EAASI,GAAOJ,EAASG,GACzBH,EAASG,GAAO,EAChBf,EAASG,GACFS,GAQJA,EASMK,CAAUd,GAC3BN,EAASe,IAmCf,OAhBEM,qBAAU,WACR,IAAMC,EAAe,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IACvC,WACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIxB,EAAMyB,OAAQD,IAChC,GAAGxB,EAAMwB,KAAOD,EAAaC,GACvB,OAAO,EAGf,OAAO,GAGHE,KACAC,QAAQC,IAAI,OACZC,MAAM,eAEX,CAAC7B,IAEJ,qBAAK8B,UAAU,QAAf,UAhCqBhC,EAiCJE,EA/BNF,EAAaiC,KAAI,SAACC,EAAMC,GAC3B,OAAY,IAATD,EAEC,qBAAKF,UAAU,OAAOI,QAAS7B,EAAY8B,KAAK,GAAOzB,GAAIuB,EAA3D,SACI,qBAAKvB,GAAIuB,EAAT,SAAeD,MAIZ,qBAAKF,UAAU,QAAf,qBC9DvB,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAClD,EAAD,CAAOmD,qBAAqB,+CAE9BC,SAASC,eAAe,SAM1Bd,K","file":"static/js/main.a7999aed.chunk.js","sourcesContent":["import React, {useState,  useEffect} from 'react';\n\n\n// the exported component can be either a function or a class\n\nexport default function Board( ) {\n    // let initialConfiguration=\n    const [board, setBoard] = useState([1,2,0,4,3,5,6,7,8,9,10,11,12,13,15,14])\n    const [emptyTile, setEmpty ] = useState(board.indexOf(0))\n\n    const inCol = (idx) => {\n        return Math.abs(idx - emptyTile) >= 4 && emptyTile % 4 === idx % 4;\n    }\n\n    const inRow = (idx) => {\n        return Math.abs(idx - emptyTile) < 4 && Math.floor(idx / 4) === Math.floor(emptyTile / 4);\n    }\n\n    const moveTiles = (idx) => {\n        const emptyIdx = emptyTile;\n        const newBoard = board.slice();\n        const min = Math.min(idx, emptyIdx);\n        const max = Math.max(idx, emptyIdx);\n        const adjacent = Math.abs(idx - emptyTile) === 4 || Math.abs(idx - emptyTile) === 1 ? true : false\n\n          if(adjacent) {\n            if(!newBoard[max]) {\n                newBoard[max] = newBoard[min];\n                newBoard[min] = 0;\n                setEmpty(idx);\n                return newBoard\n            } else {\n                newBoard[min] = newBoard[max];\n                newBoard[max] = 0;\n                setEmpty(idx);\n                return newBoard\n            }\n         }\n            return newBoard\n    }\n\n    const handleClick = (e) => {\n        let idx = Number(e.target.id)\n\n        if(!(inCol(idx) || inRow(idx))) {\n            return false;\n        }\n        const newBoard = moveTiles(idx);\n        setBoard(newBoard);\n\n    }\n\n    const renderTiles = (currentBoard) => {\n\n        return currentBoard.map((tile, key) => {\n            if(tile !== 0) {\n                return (\n                <div className=\"tile\" onClick={handleClick.bind(this)} id={key}>\n                    <div id={key}>{tile}</div>\n                </div>\n                )\n            } else {\n                return <div className=\"empty\"> </div>\n            }\n        })\n    }\n\n    useEffect(() => {\n      const victoryBoard = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,0];\n      const checkTiles = () => {\n        for (let i = 0; i < board.length; i++) {\n          if(board[i] !== victoryBoard[i]) {\n                return false\n            }\n        }\n        return true;\n      }\n\n        if (checkTiles(board)) {\n            console.log(\"win\")\n            alert(\"you win!\")\n        }\n    }, [board])\n  return (\n    <div className='board'>\n        {renderTiles(board)}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Board initialConfiguration=\"[1,2,0,4,3,5,6,7,8,9,10,11,13,15,12,14,]\"/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}